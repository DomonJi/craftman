#!/bin/sh
PLUGIN_NAME="composer"

function composer_usage()
{
	echo " $SELF composer:prepare        Generate required files to deploy to Heroku"
}

function composer_interpolate()
{
  COMPOSER_JSON="$DIR/composer.json"
  INSTALL_COMPOSER="install.composer"
  INSTALL_COMPOSER_PATH="$SCRIPTS_PATH/$INSTALL_COMPOSER"
}

function composer_configure()
{
  cd "$SCRIPTS_PATH"
  add_gitignore "composer.phar"
  if [ -f $INSTALL_COMPOSER_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $INSTALL_COMPOSER_PATH)"
  else
    log "+ Creating $(basename $INSTALL_COMPOSER_PATH) file"
    cat > $INSTALL_COMPOSER_PATH <<- EOF
#!/bin/sh
set -e
echo "===> Installing PHP Composer"
cd /scripts
curl -sS https://getcomposer.org/installer | php
EOF
  fi
}

function composer_configuration_run()
{
  run_script_once "$INSTALL_COMPOSER"
}

function composer_create_json()
{
  if [ -f $COMPOSER_JSON ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $COMPOSER_JSON)"
  else
    log "+ Creating $(basename $COMPOSER_JSON) file"
    cat > $COMPOSER_JSON <<- EOF
{
  "require": {
    "ext-mbstring": "*",
    "ext-imagick": "*",
    "php": "^5.6"
  }
}
EOF
  fi
}

function composer_prepare()
{
  log "Preparing composer.json"
  composer_create_json
}

function composer_lock()
{
  [ -f "$DIR/composer.json" ] || abort "composer.json is required"
  log "Generating composer.lock"
  mkdir -p "$SCRIPTS_PATH/composer"
  cat > "$SCRIPTS_PATH/composer/.gitignore" <<- EOF
*
!.gitignore
EOF
  docker cp "$DIR/composer.json" "$(craft_container):/scripts/composer"
  craft_exec "cd /scripts/composer && /scripts/composer.phar install && /scripts/composer.phar update"
  if [ -f "$DIR/composer.lock" ]; then
    mv -f "$DIR/composer.lock" "$DIR/composer.lock.bak"
  fi
  cp "$SCRIPTS_PATH/composer/composer.lock" "$DIR/composer.lock"
  rm -f "$DIR/composer.lock.bak"
}