#!/bin/sh
set -e
PLUGIN_NAME="mysql"
MYSQL__DATABASE_NAME="craft"

mysql__info()
{
  echo "MySQL"
}

mysql__usage()
{
  echo " $CM mysql:run             Open mysql client or run a command on MySQL docker container"
  echo " $CM mysql:backup          Create a backup at ${CM_BACKUPS_DIR}/"
  echo " $CM mysql:restore <file>  Restore a backup from <file> (.sql.gz) to MySQL database"
}

mysql__run()
{
  CMD="${@:-TERM=dumb mysql $MYSQL__DATABASE_NAME}"
  docker exec -i -t "$(cm_mysql_container)" sh -i -c "$CMD"
}

mysql__backup()
{
  mkdir -p "$CM_BACKUPS_PATH"
  MYSQL__BACKUP_FILE="$CM_BACKUPS_PATH/${CM_PROJECT_NAME}_$(date +%Y-%m-%d_%H-%M)"
  cm_log "Dumping from MySQL"
  mysql__run mysqldump craft > "$MYSQL__BACKUP_FILE.sql"
  mysql_backup_hook "$MYSQL__BACKUP_FILE.sql"
  cm_log "Gziping backup file"
  gzip -f "$MYSQL__BACKUP_FILE.sql"
  cm_log "Backup file created at $MYSQL__BACKUP_FILE.sql.gz"
}

mysql__restore()
{
  [ "$1" = "" ] && cm_abort "File is required <file.sql.gz>"
  cm_log "Restoring backup $1"
  MYSQL__RESTORE_NAME="$(basename "$1").sql"
  MYSQL__RESTORE_FILE="/tmp/$MYSQL__RESTORE_NAME"
  gzip -d -c "$1" > "$MYSQL__RESTORE_FILE"
  mysql_restore_hook "$MYSQL__RESTORE_FILE"
  cm_log "Copy backup file to container /tmp"
  docker cp "$MYSQL__RESTORE_FILE" "$(cm_mysql_container):/tmp"
  cm_log "Import backup file to MySQL"
  mysql__run "mysql craft -e 'source $MYSQL__RESTORE_FILE'"
  cm_log "Removing all temporary files"
  rm -f  "$MYSQL__RESTORE_FILE"
  mysql__run "rm -f $MYSQL__RESTORE_FILE"
  cm_log "Backup restore completed"
}

# Hook for process sql backup file
mysql_backup_hook()
{
  :
}

# Hook for process sql backup file
mysql_restore_hook()
{
  :
}
