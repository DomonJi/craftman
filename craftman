#!/bin/sh
set -e
#
# Craft CMS manager
#
declare PLUGINS=()

function initialize()
{
  # Base craftman configs
  SELF=$(basename $(readlink -f $0))
  ROOT=$(dirname $(readlink -f $0))
  DIR=`find_closest ".craftman"`
  CRAFTMAN_DIR="$HOME/.craftman"
  PLUGINS_DIR="$CRAFTMAN_DIR/plugins"
  PLUGINS_CORE_DIR="$ROOT/plugins"
  [ "$DIR" == "" ] && DIR="."
  DIR="$(readlink -f $DIR)"
  REAL_NAME=$(basename $DIR)
  NAME=$(echo "$REAL_NAME" | tr '[:upper:]' '[:lower:]')

  # Default craftman configurations
  DOCKER_PHP_IMAGE="php:5-apache"
  DOCKER_MYSQL_IMAGE="mariadb:10.1"
  DOCKER_DATA_IMAGE="debian:jessie"
  DOCKER_MYSQL_ENV=$(cat <<SETVAR
    - MYSQL_DATABASE=craft
    - MYSQL_ALLOW_EMPTY_PASSWORD=yes
SETVAR
)
  DOCKER_CRAFT_VOLUMES=""
  DOCKER_CRAFT_ENV=$(cat <<SETVAR
    - CRAFT_DEVMODE=true
SETVAR
)
  CRAFT_DOWNLOAD_URL="https://craftcms.com/latest.zip?accept_license=yes"
  CRAFT_ZIPNAME="craft-`date +%Y-%m`.zip"
  APP_DIR="app"
  BACKUP_DIR="backups"
  SCRIPTS_DIR="scripts"
  COMPOSE_FILENAME="docker-compose.yml"
  INSTALL_DEPENDENCIES="install.dependencies"
  WWW_GROUP="33"
  www_PERMISSIONS="777"

  # Default craftman options
  CRAFT_HTTP_PORT=""
  FORCE_DOWNLOAD="0"
  FORCE_OVERWRITE="0"
  FORCE_RECREATE="0"

  # Load all plugins
  interpolate
  load_plugins

  # Load custom variables and hooks
  if [ -f $DIR/.craftman ]; then
    debug "Loading $DIR/.craftman"
    . $DIR/.craftman
  fi

  # Customize any variable
  configuration_hook
  interpolate

  # Create default directories
  mkdir -p $CACHE
  mkdir -p $PLUGINS_DIR

  plugin_run_all "initialize"
}

function interpolate()
{
  # Interpolation
  APP_PATH="$DIR/$APP_DIR"
  BACKUP_PATH="$DIR/$BACKUP_DIR"
  SCRIPTS_PATH="$DIR/$SCRIPTS_DIR"
  COMPOSE_FILE="$DIR/$COMPOSE_FILENAME"
  INSTALL_DEPENDENCIES_PATH="$SCRIPTS_PATH/$INSTALL_DEPENDENCIES"
  CRAFT_DB_CONFIG_PATH="$APP_PATH/craft/config/db.php"
  CRAFT_GENERAL_CONFIG_PATH="$APP_PATH/craft/config/general.php"
  CACHE="$CRAFTMAN_DIR/cache"
  PHP_INI_PATH="$SCRIPTS_PATH/root_files/usr/local/etc/php/php.ini"
  CRAFT_ZIP="$CACHE/$CRAFT_ZIPNAME"
  PROCFILE="$DIR/Procfile"
  plugin_run_all "interpolate"
}

function usage()
{
  echo "Craft CMS Manager"
  echo
  echo "Usage: $SELF [options] <COMMAND> [args]"
  echo
  echo "Commands:"
  echo " $SELF install               Install Craft CMS in current directory"
  echo " $SELF open [path]           Open Craft CMS public site"
  echo " $SELF admin                 Open Craft CMS admin dashboard"
  echo " $SELF start                 Start Craft CMS docker containers"
  echo " $SELF stop                  Stop Craft CMS docker containers"
  echo " $SELF status                Check Craft CMS docker containers status"
  echo " $SELF ip                    Show Craft CMS docker container IP address"
  echo " $SELF run                   Open bash or run a command on Craft docker container"
  echo " $SELF regenerate            Regenerate all craftman configuration files"
  echo " $SELF reconfigure           Run all $SCRIPTS_PATH/install.* files"
  echo " $SELF copy                  Copy and overwrite $SCRIPTS_DIR/root_files/**/* to"
  echo " $SELF --upgrade             Upgrade Craftman"
  echo
  echo "Options:"
  echo " -h, --help"
  echo " -P, --port            HTTP port to expose on host"
  echo
  echo " -F, --force-all       Force redownload Craft CMS, regenerate and overwrite configurations and recreate containers"
  echo " -D, --force-download  Force to download latest Craft CMS from site"
  echo " -O, --force-overwrite Force to overwrite generated configuration files at ${APP_DIR}/ and ${SCRIPTS_DIR}/ directories"
  echo " -R, --force-recreate  Force to reconfigure and recreate containers"
  echo
  plugin_run_all "usage" "before_plugin_usage" "after_plugin_usage"
}

function trace()
{
  if [ "$TRACE" != "" ]; then
    echo "***> $@"
  fi
}

function debug()
{
  if [ "$DEBUG" != "" ]; then
    echo "---> $@"
  fi
}

function log()
{
    echo "===> $@"
}

function abort()
{
  >&2 echo "[ERROR] $1"
  exit ${2:1}
}

function plugin_run_all()
{
  RUN_COMMAND=$1
  BEFORE_PLUGIN=$2
  AFTER_PLUGIN=$3
  shift
  for PLUGIN in "${PLUGINS[@]}"
  do
    PLUGIN_COMMAND="${PLUGIN}_${RUN_COMMAND}"
    trace "Run $PLUGIN_COMMAND $@"
    if [ "`plugin_command_exists $PLUGIN_COMMAND`" == "true" ]; then
      if [ "`plugin_command_exists $BEFORE_PLUGIN`" == "true" ]; then
        $BEFORE_PLUGIN $PLUGIN $@
      fi
      $PLUGIN_COMMAND $@
      if [ "`plugin_command_exists $AFTER_PLUGIN`" == "true" ]; then
        $AFTER_PLUGIN $PLUGIN $@
      fi
    fi
  done
}

function before_plugin_usage()
{
  echo "Plugin $1"
}


function after_plugin_usage()
{
  echo
}


function plugin_install()
{
  :
}

function plugin_command_exists()
{
  PLUGIN_COMMAND="$1"
  if [ -n "$(type -t $PLUGIN_COMMAND)" ] && [ "$(type -t $PLUGIN_COMMAND)" = function ]; then
    echo "true"
  fi
}

function load_plugins()
{
  # Load plugins
  debug "Loading custom plugins from $PLUGINS_DIR"
  load_plugins_from_directory "$PLUGINS_DIR"
  debug "Loading core plugins from $PLUGINS_CORE_DIR"
  load_plugins_from_directory "$PLUGINS_CORE_DIR"
  IFS=$'\n' PLUGINS=($(sort <<<"${PLUGINS[*]}"))
}

function load_plugins_from_directory()
{
  if [ -d "$1" ]; then
    find "$1" -type f -name '*.plugin' > $CACHE/craftman_plugins
    while read PLUGIN_FILE;
    do
       debug "+  Loading plugin $PLUGIN_FILE"
       unset PLUGIN_NAME
       . "$PLUGIN_FILE"
       [ "$PLUGIN_NAME" != "" ] || abort "Plugin name not defined at $PLUGIN_FILE"
       PLUGINS+=($PLUGIN_NAME)
       debug "+  Plugin added " + $PLUGIN_NAME
    done < $CACHE/craftman_plugins
    debug "All plugins: ${PLUGINS[@]}"
  fi
}

function download()
{
  log "Preparing to download Craft CMS"
  if [ -f $CRAFT_ZIP ] && [ "$FORCE_DOWNLOAD" == "0" ]; then
    log "+  Using Craft CMS from local cache"
  else
    log "+  Downloading Craft CMS from $CRAFT_DOWNLOAD_URL"
    curl -o $CRAFT_ZIP.partial --retry 3 -0 -L -C - $CRAFT_DOWNLOAD_URL
    rm -Rf $CRAFT_ZIP
    mv -f $CRAFT_ZIP.partial $CRAFT_ZIP
  fi
}

function unpack()
{
  log "Unpacking Craft CMS"
  mkdir -p $APP_PATH
  if [ "$(ls -A $APP_PATH)" ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    abort "+  $APP_PATH is not empty"
  else
    log "+  Unzipping craft.zip to $APP_PATH"
    unzip -qo $CRAFT_ZIP -d $APP_PATH
    rm -f $CRAFT_DB_CONFIG_PATH
    rm -f $CRAFT_GENERAL_CONFIG_PATH
    if [ -d "$APP_PATH/html" ]; then
      log "+  Directory already exist $APP_PATH/html"
    else
      mkdir $APP_PATH/html
    fi
    mv -f $APP_PATH/public/* $APP_PATH/html
    if [ ! -f "$APP_PATH/html/.htaccess" ]; then
      mv $APP_PATH/html/htaccess $APP_PATH/html/.htaccess
    fi
    rm -Rf $APP_PATH/public
  fi
}

function configure()
{
  log "Configure Craft CMS"
  if [ "$FORCE_RECREATE" == "1" ]; then
    clear_script_flag "$INSTALL_DEPENDENCIES"
  fi
  create_install_script
  create_craft_db_config
  create_craft_general_config
  create_docker_compose_file
  create_php_ini
  plugin_run_all "configure"
}

function create_docker_compose_file()
{
  if [ -f $COMPOSE_FILE ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+  Using existent $(basename $COMPOSE_FILE)"
  else
    log "+  Creating $(basename $COMPOSE_FILE) file"

if [ ! "$CRAFT_HTTP_PORT" == "" ]; then
  COMPOSE_PORTS="  ports:"$'\n'"    - \"$CRAFT_HTTP_PORT:80\""
fi
    cat > $COMPOSE_FILE <<- EOF
craft:
  image: "$DOCKER_PHP_IMAGE"
  links:
    - "mysql:mysql"
  volumes:
    - "./$APP_DIR:/var/www"
    - "./$SCRIPTS_DIR:/scripts"
$DOCKER_CRAFT_VOLUMES
  environment:
$DOCKER_CRAFT_ENV
$COMPOSE_PORTS
mysql:
  image: "$DOCKER_MYSQL_IMAGE"
  volumes_from:
    - "mysql_data"
  environment:
$DOCKER_MYSQL_ENV

mysql_data:
  image: "$DOCKER_DATA_IMAGE"
  volumes:
    - "/var/lib/mysql"
EOF
  fi
}

function create_install_script()
{
  mkdir -p $SCRIPTS_PATH
  cd $SCRIPTS_PATH
  add_gitignore "*.ok"
  if [ -f $INSTALL_DEPENDENCIES_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+  Using existent $(basename $INSTALL_DEPENDENCIES_PATH)"
  else
    log "+  Creating $(basename $INSTALL_DEPENDENCIES_PATH) file"
    cat > $INSTALL_DEPENDENCIES_PATH <<- EOF
#!/bin/sh
set -e
echo "===> Installing dependencies"
cd /scripts
touch .gitignore
# Download and install libraries
apt-get update

echo "===> +  Install apt-get libraries"
apt-get install -y --no-install-recommends \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng12-dev \
        libmagickwand-dev \
        vim curl rsync git

echo "===> +  Install php extensions"
printf "\n" | pecl install -f imagick
docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
docker-php-ext-install -j\$(nproc) iconv mcrypt gd mbstring pdo pdo_mysql zip
docker-php-ext-enable imagick

echo "===> +  Enable apache mods"
a2enmod rewrite setenvif deflate headers filter

echo "===> +  Configuring site permissions"
chown -R :$WWW_GROUP /var/www
chmod -R $www_PERMISSIONS /var/www
EOF
  fi
}

function create_craft_db_config()
{
  if [ -f $CRAFT_DB_CONFIG_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+  Using existent $(basename $CRAFT_DB_CONFIG_PATH)"
  else
    log "+  Creating $(basename $CRAFT_DB_CONFIG_PATH) file"
    cat > $CRAFT_DB_CONFIG_PATH <<- EOF
<?php
/**
 * Database Configuration
 * You can see a list of the default settings in craft/app/etc/config/defaults/db.php
 */
\$env = getenv("MYSQL_ENV") ?: "MYSQL_PORT";
\$url = getenv(\$env) ?: getenv("CLEARDB_DATABASE_URL");
if (getenv("MYSQL_ENV_MYSQL_ALLOW_EMPTY_PASSWORD") == "yes") {
 \$url = 'mysql://' . (getenv("MYSQL_USER") ?: 'root') . '@' . getenv("MYSQL_PORT_3306_TCP_ADDR") . ':' . getenv("MYSQL_PORT_3306_TCP_PORT") . '/' . getenv("MYSQL_ENV_MYSQL_DATABASE");
}
\$url = \$url ?: getenv("MYSQL_URL");
\$url = parse_url(\$url ?: 'mysql://root@localhost');

return array(
  'server' => getenv('CRAFT_DB_SERVER') ?: \$url["host"],
  'port' => getenv('CRAFT_DB_PORT') ?: \$url["port"],
  'user' =>  getenv('CRAFT_DB_USER') ?: \$url["user"],
  'password' =>  getenv('CRAFT_DB_PASSWORD') ?: (\$url["pass"] ?: ""),
  'database' => getenv('CRAFT_DB_NAME') ?: substr(\$url["path"],1),
  'tablePrefix' => getenv('CRAFT_DB_TABLE_PREFIX') ?: 'craft',
);
?>
EOF
  fi
}

function create_craft_general_config()
{
  if [ -f $CRAFT_GENERAL_CONFIG_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+  Using existent $(basename $CRAFT_GENERAL_CONFIG_PATH)"
  else
    log "+  Creating $(basename $CRAFT_GENERAL_CONFIG_PATH) file"
    cat > $CRAFT_GENERAL_CONFIG_PATH <<- EOF
<?php
/**
 * General Configuration
 *
 * You can see a list of the default settings in craft/app/etc/config/defaults/general.php
 */
return array(
  '*' => array(
    'omitScriptNameInUrls' => true,
    'sendPoweredByHeader' => false,
    'devMode' => getenv("CRAFT_DEVMODE") == "true"
  )
);
?>
EOF
  fi
}

function create_php_ini()
{
  mkdir -p $(dirname "$PHP_INI_PATH")
  if [ -f $PHP_INI_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+  Using existent $(basename $PHP_INI_PATH)"
  else
    log "+  Creating $(basename $PHP_INI_PATH) file"
    cat > $PHP_INI_PATH <<- EOF
[PHP]
upload_max_filesize = 200M
post_max_size = 210M
max_execution_time = 120
max_input_vars = 100000
EOF
  fi
}

function start()
{
  log "Starting Craft CMS containers"
  UP_ARGS=""
  [ "$FORCE_RECREATE" == "1" ] && UP_ARGS="--force-recreate"

  docker_compose up $UP_ARGS -d
  pre_restart
}

function status()
{
  log "Craft CMS containers status"
  docker_compose ps | grep -v "mysql_data"
}

function stop()
{
  log "Stopping Craft CMS containers"
  docker_compose stop
}

function restart()
{
  log "Restarting Craft CMS containers"
  stop
  start
}

function install()
{
  touch "$DIR/.craftman"
  log "Installing Craft..."
  download
  unpack
  configure
  start

  log
  log "*************************************************"
  log
  log "  Run 'craftman admin' to complete installation, "
  log "  and 'craftman open' to access your site"
  log
  log "*************************************************"
  log
  craft_admin
}

function reconfigure()
{
  FORCE_RECREATE="1"
  configure
  pre_restart
}

function regenerate()
{
  FORCE_OVERWRITE="1"
  configure
}

function craft_start()
{
  start

  log
  log "*****************************************************"
  log
  log "  Run 'craftman admin' to access your control panel, "
  log "   or 'craftman open' to access your site"
  log
  log "*****************************************************"
  log
  craft_admin
}

function pre_restart()
{
  craft_copy
  configuration_run
  pre_restart_hook
  docker-compose restart craft
}

function configuration_run()
{
  run_script_once "$INSTALL_DEPENDENCIES"
  plugin_run_all "configuration_run"
}

function run_script_once()
{
  FILE="$SCRIPTS_PATH/$1"
  if [ -f "$FILE.ok" ]; then
    log "Skipping $1"
  else
    chmod +x "$FILE"
    craft_exec "/scripts/$1"
    touch "$SCRIPTS_PATH/$1.ok"
  fi
}

function clear_script_flag()
{
  rm -f "$SCRIPTS_PATH/$1.ok"
}

function craft_run()
{
  CMD="${@:-bash}"
  docker exec -i -t $(craft_container) sh -i -c "$CMD"
}

function craft_exec()
{
  CMD="${@:-echo}"
  docker exec -i -t $(craft_container) sh -c "$CMD"
}

function craft_copy()
{
  log "Copying all files and directories from '$SCRIPTS_PATH/root_files' to craft container root '/'.'"
  if [ -d "$SCRIPTS_PATH/root_files" ]; then
    craft_exec "cd /scripts/root_files/ && yes | cp -rf . /"
    log "All configuration files synced"
  else
    log "Please, check if '$SCRIPTS_PATH/root_files' directory exist"
  fi
}

function craft_open()
{
  URL=`docker-compose port craft 80`
  if [ "$URL" == "" ]; then
    URL=$(craft_ip)
  fi
  browser_open http://${URL}$1
}

function craft_admin()
{
  craft_open "/admin"
}

function craft_container()
{
  echo $(docker_compose ps | grep craft | cut -f 1 -d ' ')
}

function craft_ip()
{
  CONTAINER=$(craft_container)
  echo $(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $CONTAINER)
}


function craftman_upgrade()
{
  if [ -d $ROOT/.git ]; then
    cd $ROOT
    git pull
  else
    log "Are you sure craftman was installed in $ROOT? Try reinstalling running\n curl -o- https://raw.githubusercontent.com/gabrielmoreira/craftman/master/craftman_install | sh"
  fi
}

function docker_compose()
{
  docker-compose -f "$COMPOSE_FILE" $@
}

function browser_open()
{
  URL=$1
  log "Opening $1 in your browser"
  [[ -x $BROWSER ]] && exec "$BROWSER" "$1" > /dev/null 2>&1
  path=$(which xdg-open || which gnome-open) && exec "$path" "$1" > /dev/null 2>&1
  abort "Can't find a browser"
}

function find_closest()
{
  filename="$1"
  search_dir="."
  shift 1
  set +e
  while [[ "$search_dir" != "/" ]];
  do
      FIND=$(find "$search_dir" -maxdepth 1 -mindepth 1 -name "$filename")
      [ "$FIND" != "" ] && break
      # To ignore symlinks use "$(realsearch_dir -s $search_dir/..)"
      search_dir="$(readlink -f $search_dir/..)"
  done
  set -e
  [ -f "$search_dir/$filename" ] && echo "$search_dir" || echo ""
}

function add_gitignore()
{
  touch ".gitignore"
  grep -q "$1" ".gitignore" || (echo "$1" >> ".gitignore")
}

# *******
#  HOOKS
# *******
#  Override hooks at $DIR/.craftman shellscript

# Hook for change variables/configurations
function configuration_hook()
{
  :
}

# Hook after craft start
function pre_restart_hook()
{
  :
}

# ******
#  MAIN
# ******

# Configure variables
initialize

# Parse arguments
while [ "$1" != "" ]; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  VALUE=`echo $1 | awk -F= '{print $2}'`
  PLUGIN_NAME=`echo $1 | awk -F: '{print $1}'`
  PLUGIN_COMMAND=`echo $1 | awk -F: '{print $2}'`
  case $PARAM in
    -h | --help)
      usage
      exit
      ;;
    -F | --force-all)
      FORCE_DOWNLOAD="1"
      FORCE_OVERWRITE="1"
      FORCE_RECREATE="1"
      ;;
    -D | --force-download)
      FORCE_DOWNLOAD="1"
      ;;
    -O | --force-overwrite)
      FORCE_OVERWRITE="1"
      ;;
    -R | --force-recreate)
      FORCE_RECREATE="1"
      ;;
    -P | --port)
      CRAFT_HTTP_PORT=$VALUE
      ;;
    install)
      COMMAND="install"
      break
      ;;
    reconfigure)
      COMMAND="reconfigure"
      break
      ;;
    regenerate)
      COMMAND="regenerate"
      break
      ;;
    start)
      COMMAND="craft_start"
      break
      ;;
    status | ps)
      COMMAND="status"
      break
      ;;
    stop)
      COMMAND="stop"
      break
      ;;
    restart)
      COMMAND="restart"
      break
      ;;
    --upgrade)
      COMMAND="craftman_upgrade"
      break
      ;;
    run | craft:run)
      COMMAND="craft_run"
      break
      ;;
    ip)
      COMMAND="craft_ip"
      break
      ;;
    copy | craft:copy)
      COMMAND="craft_copy"
      break
      ;;
    open | craft:open)
      COMMAND="craft_open"
      break
      ;;
    admin | craft:admin)
      COMMAND="craft_admin"
      break
      ;;
    *)
      if [[ " ${PLUGINS[@]} " =~ " ${PLUGIN_NAME} " ]]; then
        COMMAND="${PLUGIN_NAME}_${PLUGIN_COMMAND}"
        if [ "`plugin_command_exists $COMMAND`" == "true" ]; then
          break
        fi
      fi
      echo "ERROR: unknown parameter \"$PARAM\""
      usage
      exit 1
      ;;
  esac
  shift
done
shift || (echo "ERROR: command is required" && usage && exit 1)

# Run initial command
$COMMAND "$@"
