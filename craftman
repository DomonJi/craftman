#!/bin/sh
set -e

#
# Craft CMS manager
# 

function setup()
{
  SCRIPT_NAME=$(basename $(readlink -f $0))
  ROOT=$(dirname $(readlink -f $0))
  DIR=$(readlink -f .)
  REAL_NAME=$(basename $DIR)
  NAME=$(echo "$REAL_NAME" | tr '[:upper:]' '[:lower:]')
  APP_DIR=$DIR/app
  COMPOSE=$DIR/docker-compose.yml
  CACHE=~/.craftman/cache
  CRAFT_ZIP=$CACHE/craft.zip

  # Default variables
  FORCE_UPDATE=0
  FORCE_OVERWRITE=0
  ACTION="usage"
}

function usage()
{
  echo "Craft CMS manager"
  echo ""
  echo "$SCRIPT_NAME [options] (install|start) [arguments]"
  echo '  -h --help'
  echo ""
}

function log()
{
    echo "===> $*"
}

function abort()
{
  >&2 echo "[ERROR] $1"
  exit ${2:1}
}

function download()
{
  log "Preparing to download Craft CMS"
  if [ -f $CRAFT_ZIP ] && [ "$FORCE_UPDATE" == "0" ]; then
    log "+ Using Craft CMS from local cache"
  else
    log "+ Downloading Craft CMS from https://craftcms.com/latest.zip"
    curl -o $CRAFT_ZIP -L https://craftcms.com/latest.zip?accept_license=yes
  fi
}

function unpack()
{
  log "Unpacking Craft CMS"
  mkdir -p $APP_DIR
  if [ "$(ls -A $APP_DIR)" ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    abort "+ $APP_DIR is not empty"
  else
    log "+ Unzipping craft.zip to $APP_DIR"
    unzip -qo $CRAFT_ZIP -d $APP_DIR
  fi
}

function configure()
{
  log "Configuring Craft CMS docker"
  create_compose_file
}

function create_compose_file()
{
  if [ -f $COMPOSE ]; then
    log "+ Using existent $(basename $COMPOSE)"
  else
    log "+ Creating $(basename $COMPOSE) file"
    cat > $COMPOSE <<- EOF
craft:
  image: "php:latest"
  links:
    - "mysql:mysql"
mysql:
  image: "mariadb:latest"
EOF
  fi
}

function create()
{
  log "Creating Craft CMS container"
}

function start()
{
  log "Starting Craft CMS containers"
  docker-compose -f $COMPOSE up 
}

function install()
{
  log "Starting Craft CMS installation"
  download
  unpack
  configure
  create
  start
}

function parse()
{
  while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
      -h | --help)
        usage
        exit
        ;;
      -U | --force-update)
        FORCE_UPDATE=1
        ;;
      -F | --force-overwrite)
        FORCE_OVERWRITE=1
        ;;
  # --option)
  #   OPTION=$VALUE
  #   ;;
      install)
        ACTION="install"
        break
        ;;
      start)
        ACTION="start"
        break
        ;;
      *)
        echo "ERROR: unknown parameter \"$PARAM\""
        usage
        exit 1
        ;;
    esac
    shift
  done
  shift
}

setup "$@"

# Create default directories
mkdir -p $CACHE

# Load custom variables
[ -f $DIR/.craftman ] \
  && (log "Loading $DIR/.craftman" \
      && . $DIR/.craftman
    )

parse "$@"
$ACTION "$@"
