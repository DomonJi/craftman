#!/bin/sh
set -e
#
# Craft CMS manager
#

function initialize()
{
  # Base craftman configs
  SCRIPT_NAME=$(basename $(readlink -f $0))
  ROOT=$(dirname $(readlink -f $0))
  DIR=`find_closest ".craftman"`
  CRAFTMAN_DIR="$HOME/.craftman"
  [ "$DIR" == "" ] && DIR="."
  DIR="$(readlink -f $DIR)"
  REAL_NAME=$(basename $DIR)
  NAME=$(echo "$REAL_NAME" | tr '[:upper:]' '[:lower:]')
  CRAFT_DOWNLOAD_URL="https://craftcms.com/latest.zip?accept_license=yes"

  # Default craftman configurations
  CRAFT_ZIPNAME="craft-`date +%Y-%m`.zip"
  APP_DIR="app"
  BACKUP_DIR="backups"
  SCRIPTS_DIR="scripts"
  COMPOSE_FILENAME="docker-compose.yml"
  RECONFIGURE="configure"
  WWW_GROUP="33"
  www_PERMISSIONS="777"

  # Default craftman options
  CRAFT_HTTP_PORT=""
  FORCE_DOWNLOAD="0"
  FORCE_OVERWRITE="0"
  FORCE_RECREATE="0"
  OPEN_SITE_PATH="/"

  # Load custom variables and hooks
  if [ -f $DIR/.craftman ]; then
    debug "Loading $DIR/.craftman"
    . $DIR/.craftman
  fi

  # Customize any variable
  interpolate
  configuration_hook
  interpolate

  # Create default directories
  mkdir -p $CACHE
}

function interpolate()
{
  # Interpolation
  APP_PATH="$DIR/$APP_DIR"
  BACKUP_PATH="$DIR/$BACKUP_DIR"
  SCRIPTS_PATH="$DIR/$SCRIPTS_DIR"
  COMPOSE_FILE="$DIR/$COMPOSE_FILENAME"
  RECONFIGURE_PATH="$SCRIPTS_PATH/$RECONFIGURE"
  CRAFT_DB_CONFIG_PATH="$APP_PATH/craft/config/db.php"
  CRAFT_GENERAL_CONFIG_PATH="$APP_PATH/craft/config/general.php"
  CACHE="$CRAFTMAN_DIR/cache"
  PHP_INI_PATH="$SCRIPTS_PATH/root_files/usr/local/etc/php/php.ini"
  CRAFT_ZIP="$CACHE/$CRAFT_ZIPNAME"
  PROCFILE="$DIR/Procfile"
  COMPOSER_JSON="$DIR/composer.json"
}

function usage()
{
  echo "Craft CMS manager"
  echo
  echo "Usage: $SCRIPT_NAME [options] <COMMAND> [args]"
  echo
  echo "Commands:"
  echo " $SCRIPT_NAME install               Install Craft CMS in current directory"
  echo " $SCRIPT_NAME open                  Open Craft CMS public site"
  echo " $SCRIPT_NAME admin                 Open Craft CMS admin dashboard"
  echo " $SCRIPT_NAME start                 Start Craft CMS docker containers"
  echo " $SCRIPT_NAME stop                  Stop Craft CMS docker containers"
  echo " $SCRIPT_NAME status                Check Craft CMS docker containers status"
  echo " $SCRIPT_NAME ip                    Show Craft CMS docker container IP address"
  echo " $SCRIPT_NAME run                   Open bash or run a command on Craft docker container"
  echo " $SCRIPT_NAME regenerate            Regenerate all craftman configuration files"
  echo " $SCRIPT_NAME reconfigure           Run $RECONFIGURE_PATH"
  echo " $SCRIPT_NAME copy                  Copy and overwrite $SCRIPTS_DIR/root_files/**/* to"
  echo "                                Craft container's root / with recursive directories"
  echo
  echo " $SCRIPT_NAME mysql:run             Open mysql client or run a command on MySQL docker container"
  echo " $SCRIPT_NAME mysql:backup          Create a backup at ${BACKUP_DIR}/"
  echo " $SCRIPT_NAME mysql:restore <file>  Restore a backup from <file> (.sql.gz) to MySQL database"
  echo
  echo " $SCRIPT_NAME heroku:prepare        Generate required files to deploy to Heroku"
  echo
  echo " $SCRIPT_NAME composer:lock         Regenerate composer.lock for your composer.json file"
  echo " $SCRIPT_NAME composer:prepare      Generate initial composer.json"
  echo
  echo " $SCRIPT_NAME --upgrade             Upgrade Craftman"
  echo
  echo "Options:"
  echo " -h, --help"
  echo " -P, --port            HTTP port to expose on host"
  echo
  echo " -F, --force-all       Force redownload Craft CMS, regenerate and overwrite configurations and recreate containers"
  echo " -D, --force-download  Force to download latest Craft CMS from site"
  echo " -O, --force-overwrite Force to overwrite generated configuration files at ${APP_DIR}/ and ${SCRIPTS_DIR}/ directories"
  echo " -R, --force-recreate  Force to reconfigure and recreate containers"
  echo
}

function debug()
{
  if [ "$DEBUG" != "" ]; then
    echo "---> $@"
  fi
}

function log()
{
    echo "===> $@"
}

function abort()
{
  >&2 echo "[ERROR] $1"
  exit ${2:1}
}

function download()
{
  log "Preparing to download Craft CMS"
  if [ -f $CRAFT_ZIP ] && [ "$FORCE_DOWNLOAD" == "0" ]; then
    log "+ Using Craft CMS from local cache"
  else
    log "+ Downloading Craft CMS from $CRAFT_DOWNLOAD_URL"
    curl -o $CRAFT_ZIP.partial --retry 3 -0 -L -C - $CRAFT_DOWNLOAD_URL
    rm -Rf $CRAFT_ZIP
    mv -f $CRAFT_ZIP.partial $CRAFT_ZIP
  fi
}

function unpack()
{
  log "Unpacking Craft CMS"
  mkdir -p $APP_PATH
  if [ "$(ls -A $APP_PATH)" ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    abort "+ $APP_PATH is not empty"
  else
    log "+ Unzipping craft.zip to $APP_PATH"
    unzip -qo $CRAFT_ZIP -d $APP_PATH
    rm -f $CRAFT_DB_CONFIG_PATH
    rm -f $CRAFT_GENERAL_CONFIG_PATH
    if [ -d "$APP_PATH/html" ]; then
      log "+ Directory already exist $APP_PATH/html"
    else
      mkdir $APP_PATH/html
    fi
    mv -f $APP_PATH/public/* $APP_PATH/html
    if [ ! -f "$APP_PATH/html/.htaccess" ]; then
      mv $APP_PATH/html/htaccess $APP_PATH/html/.htaccess
    fi
    rm -Rf $APP_PATH/public
  fi
}

function configure()
{
  log "Configure Craft CMS"
  if [ "$FORCE_RECREATE" == "1" ]; then
    rm -f $SCRIPTS_PATH/$RECONFIGURE.ok
  fi
  create_configure_script
  create_craft_db_config
  create_craft_general_config
  create_docker_compose_file
  create_php_ini
}

function create_docker_compose_file()
{
  if [ -f $COMPOSE_FILE ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $COMPOSE_FILE)"
  else
    log "+ Creating $(basename $COMPOSE_FILE) file"

if [ ! "$CRAFT_HTTP_PORT" == "" ]; then
  COMPOSE_PORTS="ports:"$'\n'"    - \"$CRAFT_HTTP_PORT:80\""
fi
    cat > $COMPOSE_FILE <<- EOF
craft:
  image: "php:5-apache"
  links:
    - "mysql:mysql"
  volumes:
    - "./$APP_DIR:/var/www"
    - "./$SCRIPTS_DIR:/scripts"
  $COMPOSE_PORTS
mysql:
  image: "mariadb:10.1"
  volumes_from:
    - "mysql_data"
  environment:
    - MYSQL_DATABASE=craft
    - MYSQL_ALLOW_EMPTY_PASSWORD=yes
mysql_data:
  image: "debian:jessie"
  volumes:
    - "/var/lib/mysql"
EOF
  fi
}

function create_configure_script()
{
  mkdir -p $SCRIPTS_PATH
  if [ -f $RECONFIGURE_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $RECONFIGURE_PATH)"
  else
    log "+ Creating $(basename $RECONFIGURE_PATH) file"
    cat > $RECONFIGURE_PATH <<- EOF
#!/bin/sh
set -e
echo "===> Starting dependencies installation"
cd /scripts
touch .gitignore
if [ -f /scripts/$RECONFIGURE.ok ]; then
  echo "===> Dependencies already installed"
else
  # Download and install libraries
  apt-get update
  apt-get install -y --no-install-recommends \
          libfreetype6-dev \
          libjpeg62-turbo-dev \
          libmcrypt-dev \
          libpng12-dev \
          libmagickwand-dev \
          vim curl rsync git
  printf "\n" | pecl install -f imagick

  # Configure and make libraries
  docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
  docker-php-ext-install -j\$(nproc) iconv mcrypt gd mbstring pdo pdo_mysql zip
  docker-php-ext-enable imagick

  # Install PHP composer
  curl -sS https://getcomposer.org/installer | php

  # Other configurations
  a2enmod rewrite setenvif deflate headers filter
  touch $RECONFIGURE.ok

  echo "===> Dependencies installed"
fi
grep -q "composer.phar" ".gitignore" || (echo "composer.phar" >> .gitignore)
grep -q "$RECONFIGURE.ok" ".gitignore" || (echo "$RECONFIGURE.ok" >> .gitignore)
echo "===> Configuring site permissions"
chown -R :$WWW_GROUP /var/www
chmod -R $www_PERMISSIONS /var/www
EOF
  fi
  chmod +x $RECONFIGURE_PATH
}

function create_craft_db_config()
{
  if [ -f $CRAFT_DB_CONFIG_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $CRAFT_DB_CONFIG_PATH)"
  else
    log "+ Creating $(basename $CRAFT_DB_CONFIG_PATH) file"
    cat > $CRAFT_DB_CONFIG_PATH <<- EOF
<?php
/**
 * Database Configuration
 * You can see a list of the default settings in craft/app/etc/config/defaults/db.php
 */
\$env = getenv("MYSQL_ENV") ?: "MYSQL_PORT";
\$url = getenv(\$env) ?: getenv("CLEARDB_DATABASE_URL");
if (getenv("MYSQL_ENV_MYSQL_ALLOW_EMPTY_PASSWORD") == "yes") {
 \$url = 'mysql://' . (getenv("MYSQL_USER") ?: 'root') . '@' . getenv("MYSQL_PORT_3306_TCP_ADDR") . ':' . getenv("MYSQL_PORT_3306_TCP_PORT") . '/' . getenv("MYSQL_ENV_MYSQL_DATABASE");
}
\$url = \$url ?: getenv("MYSQL_URL");
\$url = parse_url(\$url ?: 'mysql://root@localhost');

return array(
  'server' => getenv('CRAFT_DB_SERVER') ?: \$url["host"],
  'port' => getenv('CRAFT_DB_PORT') ?: \$url["port"],
  'user' =>  getenv('CRAFT_DB_USER') ?: \$url["user"],
  'password' =>  getenv('CRAFT_DB_PASSWORD') ?: (\$url["pass"] ?: ""),
  'database' => getenv('CRAFT_DB_NAME') ?: substr(\$url["path"],1),
  'tablePrefix' => getenv('CRAFT_DB_TABLE_PREFIX') ?: 'craft',
);
?>
EOF
  fi
}

function create_craft_general_config()
{
  if [ -f $CRAFT_GENERAL_CONFIG_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $CRAFT_GENERAL_CONFIG_PATH)"
  else
    log "+ Creating $(basename $CRAFT_GENERAL_CONFIG_PATH) file"
    cat > $CRAFT_GENERAL_CONFIG_PATH <<- EOF
<?php
/**
 * General Configuration
 *
 * You can see a list of the default settings in craft/app/etc/config/defaults/general.php
 */
return array(
  '*' => array(
    'omitScriptNameInUrls' => true,
    'sendPoweredByHeader' => false,
    'devMode' => getenv("CRAFT_DEVMODE") == "true"
  )
);
?>
EOF
  fi
}

function create_php_ini()
{
  mkdir -p $(dirname "$PHP_INI_PATH")
  if [ -f $PHP_INI_PATH ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $PHP_INI_PATH)"
  else
    log "+ Creating $(basename $PHP_INI_PATH) file"
    cat > $PHP_INI_PATH <<- EOF
[PHP]
upload_max_filesize = 200M
post_max_size = 210M
max_execution_time = 120
max_input_vars = 100000
EOF
  fi
}

function start()
{
  log "Starting Craft CMS containers"
  UP_ARGS=""
  [ "$FORCE_RECREATE" == "1" ] && UP_ARGS="--force-recreate"

  docker_compose up $UP_ARGS -d
  dependencies_install
}

function status()
{
  log "Craft CMS containers status"
  docker_compose ps | grep -v "mysql_data"
}

function stop()
{
  log "Stopping Craft CMS containers"
  docker_compose stop
}

function restart()
{
  log "Restarting Craft CMS containers"
  stop
  start
}

function install()
{
  touch "$DIR/.craftman"
  log "Installing Craft..."
  download
  unpack
  configure
  start

  log
  log "*************************************************"
  log
  log "  Run 'craftman admin' to complete installation, "
  log "  and 'craftman open' to access your site"
  log
  log "*************************************************"
  log
  craft_admin
}

function reconfigure()
{
  FORCE_RECREATE="1"
  configure
  dependencies_install
}

function regenerate()
{
  FORCE_OVERWRITE="1"
  configure
}

function craft_start()
{
  start

  log
  log "*****************************************************"
  log
  log "  Run 'craftman admin' to access your control panel, "
  log "   or 'craftman open' to access your site"
  log
  log "*****************************************************"
  log
  craft_admin
}

function dependencies_install()
{
  craft_exec "/scripts/$RECONFIGURE"
  craft_copy
  post_install_hook
  docker-compose restart craft
}

function craft_run()
{
  CMD="${@:-bash}"
  docker exec -i -t $(craft_container) sh -i -c "$CMD"
}

function craft_exec()
{
  CMD="${@:-echo}"
  docker exec -i -t $(craft_container) sh -c "$CMD"
}

function craft_copy()
{
  log "Copying all files and directories from '$SCRIPTS_PATH/root_files' to craft container root '/'.'"
  if [ -d "$SCRIPTS_PATH/root_files" ]; then
    craft_exec "rsync -hPprvs /scripts/root_files/ /"
    log "All configuration files synced"
  else
    log "Please, check if '$SCRIPTS_PATH/root_files' directory exist"
  fi
}

function craft_open()
{
  URL=`docker-compose port craft 80`
  if [ "$URL" == "" ]; then
    URL=$(craft_ip)
  fi
  browser_open http://${URL}${OPEN_SITE_PATH}
}

function craft_admin()
{
  OPEN_SITE_PATH="/admin"
  craft_open
}

function craft_container()
{
  echo $(docker_compose ps | grep craft | cut -f 1 -d ' ')
}

function craft_ip()
{
  CONTAINER=$(craft_container)
  echo $(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $CONTAINER)
}

function mysql_run()
{
  CMD="${@:-mysql}"
  docker exec -i -t $(mysql_container) sh -i -c "$CMD"
}

function mysql_backup()
{
  mkdir -p $BACKUP_PATH
  BACKUP_FILE=$BACKUP_PATH/${NAME}_`date +%Y-%m-%d_%H-%M`
  log "Dumping from MySQL"
  mysql_run mysqldump craft > "$BACKUP_FILE.sql"
  mysql_backup_hook "$BACKUP_FILE.sql"
  log "Gziping backup file"
  gzip -f $BACKUP_FILE.sql
  log "Backup file created at $BACKUP_FILE.sql.gz"
}

function mysql_container()
{
  echo $(docker_compose ps | grep mysqld | cut -f 1 -d ' ')
}

function mysql_restore()
{
  [ "$1" == "" ] && abort "File is required <file.sql.gz>"
  log "Restoring backup $1"
  RESTORE_NAME="`basename $1`.sql"
  RESTORE_FILE="/tmp/$RESTORE_NAME"
  gzip -d -c "$1" > "$RESTORE_FILE"
  mysql_restore_hook "$RESTORE_FILE"
  log "Copy backup file to container /tmp"
  docker cp $RESTORE_FILE $(mysql_container):/tmp
  log "Import backup file to MySQL"
  mysql_run "mysql craft -e 'source $RESTORE_FILE'"
  log "Removing all temporary files"
  rm -f  $RESTORE_FILE
  mysql_run "rm -f $RESTORE_FILE"
  log "Backup restore completed"
}

function craftman_upgrade()
{
  if [ -d $ROOT/.git ]; then
    cd $ROOT
    git pull
  else
    log "Are you sure craftman was installed in $ROOT? Try reinstalling running\n curl -o- https://raw.githubusercontent.com/gabrielmoreira/craftman/master/craftman_install | sh"
  fi
}

function create_procfile()
{
  if [ -f $PROCFILE ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $PROCFILE)"
  else
    log "+ Creating $(basename $PROCFILE) file"
    cat > $PROCFILE <<- EOF
web: vendor/bin/heroku-php-apache2 -i scripts/root_files/usr/local/etc/php/php.ini app/html
EOF
  fi
}

function create_composer_json()
{
  if [ -f $COMPOSER_JSON ] && [ "$FORCE_OVERWRITE" == "0" ]; then
    log "+ Using existent $(basename $COMPOSER_JSON)"
  else
    log "+ Creating $(basename $COMPOSER_JSON) file"
    cat > $COMPOSER_JSON <<- EOF
{
  "require": {
    "ext-mbstring": "*",
    "ext-imagick": "*",
    "php": "^5.6"
  }
}
EOF
  fi
}

function heroku_prepare()
{
  log "Preparing Craft CMS for heroku deploy"
  create_procfile
  create_composer_json
  composer_lock
}

function composer_prepare()
{
  log "Preparing composer.json"
  create_composer_json
}

function composer_lock()
{
  [ -f "$DIR/composer.json" ] || abort "composer.json is required"
  log "Generating composer.lock"
  mkdir -p "$SCRIPTS_PATH/composer"
  cat > "$SCRIPTS_PATH/composer/.gitignore" <<- EOF
*
!.gitignore
EOF
  docker cp "$DIR/composer.json" "$(craft_container):/scripts/composer"
  craft_exec "cd /scripts/composer && /scripts/composer.phar install && /scripts/composer.phar update"
  if [ -f "$DIR/composer.lock" ]; then
    mv -f "$DIR/composer.lock" "$DIR/composer.lock.bak"
  fi
  cp "$SCRIPTS_PATH/composer/composer.lock" "$DIR/composer.lock"
  rm -f "$DIR/composer.lock.bak"
}

function docker_compose()
{
  docker-compose -f "$COMPOSE_FILE" $@
}

function browser_open()
{
  URL=$1
  log "Opening $1 in your browser"
  [[ -x $BROWSER ]] && exec "$BROWSER" "$1" > /dev/null 2>&1
  path=$(which xdg-open || which gnome-open) && exec "$path" "$1" > /dev/null 2>&1
  abort "Can't find a browser"
}

function find_closest()
{
  filename="$1"
  search_dir="."
  shift 1
  set +e
  while [[ "$search_dir" != "/" ]];
  do
      FIND=$(find "$search_dir" -maxdepth 1 -mindepth 1 -name "$filename")
      [ "$FIND" != "" ] && break
      # To ignore symlinks use "$(realsearch_dir -s $search_dir/..)"
      search_dir="$(readlink -f $search_dir/..)"
  done
  set -e
  [ -f "$search_dir/$filename" ] && echo "$search_dir" || echo ""
}


# *******
#  HOOKS
# *******
#  Override hooks at $DIR/.craftman shellscript

# Hook for change variables/configurations
function configuration_hook()
{
  :
}

# Hook after craft installation
function post_install_hook()
{
  :
}

# Hook for process sql backup file
function mysql_backup_hook()
{
  :
}

# Hook for process sql backup file
function mysql_restore_hook()
{
  :
}

# ******
#  MAIN
# ******

# Configure variables
initialize

# Parse arguments
while [ "$1" != "" ]; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  VALUE=`echo $1 | awk -F= '{print $2}'`
  case $PARAM in
    -h | --help)
      usage
      exit
      ;;
    -F | --force-all)
      FORCE_DOWNLOAD="1"
      FORCE_OVERWRITE="1"
      FORCE_RECREATE="1"
      ;;
    -D | --force-download)
      FORCE_DOWNLOAD="1"
      ;;
    -O | --force-overwrite)
      FORCE_OVERWRITE="1"
      ;;
    -R | --force-recreate)
      FORCE_RECREATE="1"
      ;;
    -P | --port)
      CRAFT_HTTP_PORT=$VALUE
      ;;
    install)
      COMMAND="install"
      break
      ;;
    reconfigure)
      COMMAND="dependencies_install"
      break
      ;;
    regenerate)
      COMMAND="regenerate"
      break
      ;;
    start)
      COMMAND="craft_start"
      break
      ;;
    status | ps)
      COMMAND="status"
      break
      ;;
    stop)
      COMMAND="stop"
      break
      ;;
    restart)
      COMMAND="restart"
      break
      ;;
    --upgrade)
      COMMAND="craftman_upgrade"
      break
      ;;
    run | craft:run)
      COMMAND="craft_run"
      break
      ;;
    ip)
      COMMAND="craft_ip"
      break
      ;;
    copy | craft:copy)
      COMMAND="craft_copy"
      break
      ;;
    open | craft:open)
      COMMAND="craft_open"
      break
      ;;
    admin | craft:admin)
      COMMAND="craft_admin"
      break
      ;;
    mysql:run)
      COMMAND="mysql_run"
      break
      ;;
    mysql:backup)
      COMMAND="mysql_backup"
      break
      ;;
    mysql:restore)
      COMMAND="mysql_restore"
      break
      ;;
    composer:prepare)
      COMMAND="composer_prepare"
      break
      ;;
    composer:lock)
      COMMAND="composer_lock"
      break
      ;;
    heroku:prepare)
      COMMAND="heroku_prepare"
      break
      ;;
    *)
      echo "ERROR: unknown parameter \"$PARAM\""
      usage
      exit 1
      ;;
  esac
  shift
done
shift || (echo "ERROR: command is required" && usage && exit 1)

# Run initial command
$COMMAND "$@"
